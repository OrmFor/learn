<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yinmimoney.web.p2pnew.dao.InsuredPersonMapper" >
  <resultMap id="BaseResultMap" type="com.yinmimoney.web.p2pnew.pojo.InsuredPerson" extends="associationMap">
	<id column="id" property="id" />
	<result column="user_code" property="userCode" />
	<result column="insured_person_code" property="insuredPersonCode" />
	<result column="insured_person_name" property="insuredPersonName" />
	<result column="insured_person_sex" property="insuredPersonSex" />
	<result column="insured_person_card_type" property="insuredPersonCardType" />
	<result column="insured_person_card_no" property="insuredPersonCardNo" />
	<result column="insured_person_si_status" property="insuredPersonSiStatus" />
	<result column="relation" property="relation" />
	<result column="insured_person_status" property="insuredPersonStatus" />
	<result column="is_delete" property="isDelete" />
	<result column="add_time" property="addTime" />
	<result column="update_time" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List" >
		`id`
		,`user_code`
		,`insured_person_code`
		,`insured_person_name`
		,`insured_person_sex`
		,`insured_person_card_type`
		,`insured_person_card_no`
		,`insured_person_si_status`
		,`relation`
		,`insured_person_status`
		,`is_delete`
		,`add_time`
		,`update_time`
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    SELECT 
    <include refid="Base_Column_List" />
    FROM `insured_person`
    WHERE `id` = #{id}
  </select>
  <select id="getByCondition" resultMap="BaseResultMap" parameterType="java.util.Map" >
    SELECT 
    <include refid="Base_Column_List" />
    FROM `insured_person`
    <include refid="map_params_where_condition" />
    <if test="orderBy == null" >
      ORDER BY `id` DESC
    </if>
    <if test="orderBy != null and orderBy != 'no'" >
      ORDER BY ${orderBy}
    </if>
	LIMIT 1
  </select>
  <select id="aggregate" parameterType="java.util.Map" resultType="java.util.Map">
    SELECT ${aggregate_sql} FROM `insured_person`
    <include refid="map_params_where_condition" />
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    DELETE FROM `insured_person`
    WHERE `id` = #{id}
  </delete>
  <insert id="insert" parameterType="com.yinmimoney.web.p2pnew.pojo.InsuredPerson" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    INSERT INTO `insured_person` (
	  `user_code`
	  ,`insured_person_code`
	  ,`insured_person_name`
	  ,`insured_person_sex`
	  ,`insured_person_card_type`
	  ,`insured_person_card_no`
	  ,`insured_person_si_status`
	  ,`relation`
	  ,`insured_person_status`
	  ,`is_delete`
	  ,`add_time`
	  ,`update_time`
      )
    VALUES (
		  
		  #{userCode}
		  ,
		  #{insuredPersonCode}
		  ,
		  #{insuredPersonName}
		  ,
		  #{insuredPersonSex}
		  ,
		  #{insuredPersonCardType}
		  ,
		  #{insuredPersonCardNo}
		  ,
		  #{insuredPersonSiStatus}
		  ,
		  #{relation}
		  ,
		  #{insuredPersonStatus}
		  ,
		  #{isDelete}
		  ,
		  <if test="addTime != null" >
			#{addTime}
      </if>
      <if test="addTime == null" >
      NOW()
		  </if>
		  ,
		  <if test="updateTime != null" >
			#{updateTime}
      </if>
      <if test="updateTime == null" >
      NOW()
		  </if>
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yinmimoney.web.p2pnew.pojo.InsuredPerson" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    INSERT INTO `insured_person`
    <trim prefix="(" suffix=")" suffixOverrides="," >
		  <if test="userCode != null" >
			`user_code`,
		  </if>
		  <if test="insuredPersonCode != null" >
			`insured_person_code`,
		  </if>
		  <if test="insuredPersonName != null" >
			`insured_person_name`,
		  </if>
		  <if test="insuredPersonSex != null" >
			`insured_person_sex`,
		  </if>
		  <if test="insuredPersonCardType != null" >
			`insured_person_card_type`,
		  </if>
		  <if test="insuredPersonCardNo != null" >
			`insured_person_card_no`,
		  </if>
		  <if test="insuredPersonSiStatus != null" >
			`insured_person_si_status`,
		  </if>
		  <if test="relation != null" >
			`relation`,
		  </if>
		  <if test="insuredPersonStatus != null" >
			`insured_person_status`,
		  </if>
		  <if test="isDelete != null" >
			`is_delete`,
		  </if>
			`add_time`,
			`update_time`,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
		  <if test="userCode != null" >
			#{userCode},
		  </if>
		  <if test="insuredPersonCode != null" >
			#{insuredPersonCode},
		  </if>
		  <if test="insuredPersonName != null" >
			#{insuredPersonName},
		  </if>
		  <if test="insuredPersonSex != null" >
			#{insuredPersonSex},
		  </if>
		  <if test="insuredPersonCardType != null" >
			#{insuredPersonCardType},
		  </if>
		  <if test="insuredPersonCardNo != null" >
			#{insuredPersonCardNo},
		  </if>
		  <if test="insuredPersonSiStatus != null" >
			#{insuredPersonSiStatus},
		  </if>
		  <if test="relation != null" >
			#{relation},
		  </if>
		  <if test="insuredPersonStatus != null" >
			#{insuredPersonStatus},
		  </if>
		  <if test="isDelete != null" >
			#{isDelete},
		  </if>
		  <if test="addTime != null" >
			#{addTime},
      </if>
      <if test="addTime == null" >
      NOW(),
		  </if>
		  <if test="updateTime != null" >
			#{updateTime},
      </if>
      <if test="updateTime == null" >
      NOW(),
		  </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yinmimoney.web.p2pnew.pojo.InsuredPerson" >
    UPDATE `insured_person`
    <set >
	  <if test="userCode != null" >
        `user_code` = #{userCode},
      </if>
	  <if test="insuredPersonCode != null" >
        `insured_person_code` = #{insuredPersonCode},
      </if>
	  <if test="insuredPersonName != null" >
        `insured_person_name` = #{insuredPersonName},
      </if>
	  <if test="insuredPersonSex != null" >
        `insured_person_sex` = #{insuredPersonSex},
      </if>
	  <if test="insuredPersonCardType != null" >
        `insured_person_card_type` = #{insuredPersonCardType},
      </if>
	  <if test="insuredPersonCardNo != null" >
        `insured_person_card_no` = #{insuredPersonCardNo},
      </if>
	  <if test="insuredPersonSiStatus != null" >
        `insured_person_si_status` = #{insuredPersonSiStatus},
      </if>
	  <if test="relation != null" >
        `relation` = #{relation},
      </if>
	  <if test="insuredPersonStatus != null" >
        `insured_person_status` = #{insuredPersonStatus},
      </if>
	  <if test="isDelete != null" >
        `is_delete` = #{isDelete},
      </if>
	  <if test="addTime != null" >
        `add_time` = #{addTime},
      </if>
	  <if test="updateTime != null" >
        `update_time` = #{updateTime},
      </if>
    </set>
    WHERE `id` = #{id}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yinmimoney.web.p2pnew.pojo.InsuredPerson" >
	UPDATE `insured_person` SET
        `user_code` = #{userCode},
        `insured_person_code` = #{insuredPersonCode},
        `insured_person_name` = #{insuredPersonName},
        `insured_person_sex` = #{insuredPersonSex},
        `insured_person_card_type` = #{insuredPersonCardType},
        `insured_person_card_no` = #{insuredPersonCardNo},
        `insured_person_si_status` = #{insuredPersonSiStatus},
        `relation` = #{relation},
        `insured_person_status` = #{insuredPersonStatus},
        `is_delete` = #{isDelete},
        `add_time` = #{addTime},
        `update_time` = #{updateTime}
    WHERE `id` = #{id}
  </update>
  <update id="updateByCondition" parameterType="java.util.Map" >
    UPDATE `insured_person`
    <set>
	  <if test="entity.userCode != null" >
        `user_code` = #{entity.userCode},
      </if>
	  <if test="entity.insuredPersonCode != null" >
        `insured_person_code` = #{entity.insuredPersonCode},
      </if>
	  <if test="entity.insuredPersonName != null" >
        `insured_person_name` = #{entity.insuredPersonName},
      </if>
	  <if test="entity.insuredPersonSex != null" >
        `insured_person_sex` = #{entity.insuredPersonSex},
      </if>
	  <if test="entity.insuredPersonCardType != null" >
        `insured_person_card_type` = #{entity.insuredPersonCardType},
      </if>
	  <if test="entity.insuredPersonCardNo != null" >
        `insured_person_card_no` = #{entity.insuredPersonCardNo},
      </if>
	  <if test="entity.insuredPersonSiStatus != null" >
        `insured_person_si_status` = #{entity.insuredPersonSiStatus},
      </if>
	  <if test="entity.relation != null" >
        `relation` = #{entity.relation},
      </if>
	  <if test="entity.insuredPersonStatus != null" >
        `insured_person_status` = #{entity.insuredPersonStatus},
      </if>
	  <if test="entity.isDelete != null" >
        `is_delete` = #{entity.isDelete},
      </if>
	  <if test="entity.addTime != null" >
        `add_time` = #{entity.addTime},
      </if>
	  <if test="entity.updateTime != null" >
        `update_time` = #{entity.updateTime},
      </if>
      <foreach collection="entity.nullColums" item="nullColum">
        `${nullColum}` = NULL,
      </foreach>
    </set>
    <include refid="map_params_where_condition" />
  </update>
  <update id="updateIncreateNumbers" parameterType="java.util.Map" >
    UPDATE `insured_person`
    <set>
      <foreach collection="increateNumbers" item="numberCloums">
        `${numberCloums.column}` = `${numberCloums.column}` + #{numberCloums.number},
      </foreach>
    </set>
    <include refid="map_params_where_condition" />
  </update>
  <sql id="map_params_where_condition" >
    <trim prefix="WHERE" prefixOverrides="AND">
	  <if test="id != null" >
        AND `id` = #{id}
	  </if>
	  <if test="userCode != null" >
        AND `user_code` = #{userCode}
	  </if>
	  <if test="insuredPersonCode != null" >
        AND `insured_person_code` = #{insuredPersonCode}
	  </if>
	  <if test="insuredPersonName != null" >
        AND `insured_person_name` = #{insuredPersonName}
	  </if>
	  <if test="insuredPersonSex != null" >
        AND `insured_person_sex` = #{insuredPersonSex}
	  </if>
	  <if test="insuredPersonCardType != null" >
        AND `insured_person_card_type` = #{insuredPersonCardType}
	  </if>
	  <if test="insuredPersonCardNo != null" >
        AND `insured_person_card_no` = #{insuredPersonCardNo}
	  </if>
	  <if test="insuredPersonSiStatus != null" >
        AND `insured_person_si_status` = #{insuredPersonSiStatus}
	  </if>
	  <if test="relation != null" >
        AND `relation` = #{relation}
	  </if>
	  <if test="insuredPersonStatus != null" >
        AND `insured_person_status` = #{insuredPersonStatus}
	  </if>
	  <if test="isDelete != null" >
        AND `is_delete` = #{isDelete}
	  </if>
	  <if test="addTime != null" >
        AND `add_time` = #{addTime}
	  </if>
	  <if test="updateTime != null" >
        AND `update_time` = #{updateTime}
	  </if>
	  <if test="condition != null">
	  <if test="condition.id != null" >
        AND `id` = #{condition.id}
	  </if>
	  <if test="condition.userCode != null" >
        AND `user_code` = #{condition.userCode}
	  </if>
	  <if test="condition.insuredPersonCode != null" >
        AND `insured_person_code` = #{condition.insuredPersonCode}
	  </if>
	  <if test="condition.insuredPersonName != null" >
        AND `insured_person_name` = #{condition.insuredPersonName}
	  </if>
	  <if test="condition.insuredPersonSex != null" >
        AND `insured_person_sex` = #{condition.insuredPersonSex}
	  </if>
	  <if test="condition.insuredPersonCardType != null" >
        AND `insured_person_card_type` = #{condition.insuredPersonCardType}
	  </if>
	  <if test="condition.insuredPersonCardNo != null" >
        AND `insured_person_card_no` = #{condition.insuredPersonCardNo}
	  </if>
	  <if test="condition.insuredPersonSiStatus != null" >
        AND `insured_person_si_status` = #{condition.insuredPersonSiStatus}
	  </if>
	  <if test="condition.relation != null" >
        AND `relation` = #{condition.relation}
	  </if>
	  <if test="condition.insuredPersonStatus != null" >
        AND `insured_person_status` = #{condition.insuredPersonStatus}
	  </if>
	  <if test="condition.isDelete != null" >
        AND `is_delete` = #{condition.isDelete}
	  </if>
	  <if test="condition.addTime != null" >
        AND `add_time` = #{condition.addTime}
	  </if>
	  <if test="condition.updateTime != null" >
        AND `update_time` = #{condition.updateTime}
	  </if>
	  </if>
	  <if test="vo != null and !vo.expressionChainList.empty">
        AND
        <foreach collection="vo.expressionChainList" item="expressionChain" separator="OR">
          <if test="!expressionChain.expressionList.empty">
            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
              <choose>
                <when test="expression.type == 0">
                  `${expression.column}` ${expression.operator}
                </when>
                <when test="expression.type == 1">
                  `${expression.column}` ${expression.operator} #{expression.value}
                </when>
                <when test="expression.type == 2">
                  `${expression.column}` ${expression.operator} #{expression.value} AND #{expression.value1}
                </when>
                <when test="expression.type == 3">
                  `${expression.column}` ${expression.operator}
                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
                    #{value}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </if>
        </foreach>
      </if>
      <if test="expressionChainList != null and !expressionChainList.empty">
        AND
        <foreach collection="expressionChainList" item="expressionChain" separator="OR">
          <if test="!expressionChain.expressionList.empty">
            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
              <choose>
                <when test="expression.type == 0">
                  `${expression.column}` ${expression.operator}
                </when>
                <when test="expression.type == 1">
                  `${expression.column}` ${expression.operator} #{expression.value}
                </when>
                <when test="expression.type == 2">
                  `${expression.column}` ${expression.operator} #{expression.value} AND #{expression.value1}
                </when>
                <when test="expression.type == 3">
                  `${expression.column}` ${expression.operator}
                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
                    #{value}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </if>
        </foreach>
      </if>
      <include refid="map_params_where_condition_ext" />
    </trim>
  </sql>
  <select id="getList" resultMap="BaseResultMap" parameterType="java.util.Map" >
    SELECT
    <include refid="Base_Column_List" />
    FROM `insured_person`
    <include refid="map_params_where_condition" />
    <if test="orderBy == null" >
      ORDER BY `id` DESC
    </if>
    <if test="orderBy != null and orderBy != 'no'" >
      ORDER BY ${orderBy}
    </if>
    <if test="pageBeginIndex != null and pageSize != null" >
      LIMIT #{pageBeginIndex},#{pageSize}
    </if>
    <if test="pageBeginIndex == null and pageSize != null" >
      LIMIT #{pageSize}
    </if>
    <if test="pageBeginIndex != null and pageSize == null" >
      LIMIT #{pageBeginIndex}
    </if>
  </select>
  <delete id="delete" parameterType="java.util.Map" >
    DELETE
    FROM `insured_person`
    <include refid="map_params_where_condition" />
  </delete>
  <select id="getCount" resultType="java.lang.Integer" parameterType="java.util.Map" >
    SELECT COUNT(1)
    FROM `insured_person`
    <include refid="map_params_where_condition" />
  </select>
</mapper>