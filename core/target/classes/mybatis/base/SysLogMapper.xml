<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yinmimoney.web.p2pnew.dao.SysLogMapper" >
  <resultMap id="BaseResultMap" type="com.yinmimoney.web.p2pnew.pojo.SysLog" extends="associationMap">
	<id column="id" property="id" />
	<result column="admin_id" property="adminId" />
	<result column="module_type" property="moduleType" />
	<result column="oprate_type" property="oprateType" />
	<result column="name" property="name" />
	<result column="uri" property="uri" />
	<result column="msg" property="msg" />
	<result column="ip" property="ip" />
	<result column="date_add" property="dateAdd" />
	<result column="updated_at" property="updatedAt" />
  </resultMap>
  <sql id="Base_Column_List" >
		`id`
		,`admin_id`
		,`module_type`
		,`oprate_type`
		,`name`
		,`uri`
		,`msg`
		,`ip`
		,`date_add`
		,`updated_at`
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    SELECT 
    <include refid="Base_Column_List" />
    FROM `sys_log`
    WHERE `id` = #{id}
  </select>
  <select id="getByCondition" resultMap="BaseResultMap" parameterType="java.util.Map" >
    SELECT 
    <include refid="Base_Column_List" />
    FROM `sys_log`
    <include refid="map_params_where_condition" />
    <if test="orderBy == null" >
      ORDER BY `id` DESC
    </if>
    <if test="orderBy != null and orderBy != 'no'" >
      ORDER BY ${orderBy}
    </if>
	LIMIT 1
  </select>
  <select id="aggregate" parameterType="java.util.Map" resultType="java.util.Map">
    SELECT ${aggregate_sql} FROM `sys_log`
    <include refid="map_params_where_condition" />
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    DELETE FROM `sys_log`
    WHERE `id` = #{id}
  </delete>
  <insert id="insert" parameterType="com.yinmimoney.web.p2pnew.pojo.SysLog" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    INSERT INTO `sys_log` (
	  `admin_id`
	  ,`module_type`
	  ,`oprate_type`
	  ,`name`
	  ,`uri`
	  ,`msg`
	  ,`ip`
	  ,`date_add`
	  ,`updated_at`
      )
    VALUES (
		  
		  #{adminId}
		  ,
		  #{moduleType}
		  ,
		  #{oprateType}
		  ,
		  #{name}
		  ,
		  #{uri}
		  ,
		  #{msg}
		  ,
		  #{ip}
		  ,
		  <if test="dateAdd != null" >
			#{dateAdd}
      </if>
      <if test="dateAdd == null" >
      NOW()
		  </if>
		  ,
		  #{updatedAt}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yinmimoney.web.p2pnew.pojo.SysLog" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    INSERT INTO `sys_log`
    <trim prefix="(" suffix=")" suffixOverrides="," >
		  <if test="adminId != null" >
			`admin_id`,
		  </if>
		  <if test="moduleType != null" >
			`module_type`,
		  </if>
		  <if test="oprateType != null" >
			`oprate_type`,
		  </if>
		  <if test="name != null" >
			`name`,
		  </if>
		  <if test="uri != null" >
			`uri`,
		  </if>
		  <if test="msg != null" >
			`msg`,
		  </if>
		  <if test="ip != null" >
			`ip`,
		  </if>
			`date_add`,
		  <if test="updatedAt != null" >
			`updated_at`,
		  </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
		  <if test="adminId != null" >
			#{adminId},
		  </if>
		  <if test="moduleType != null" >
			#{moduleType},
		  </if>
		  <if test="oprateType != null" >
			#{oprateType},
		  </if>
		  <if test="name != null" >
			#{name},
		  </if>
		  <if test="uri != null" >
			#{uri},
		  </if>
		  <if test="msg != null" >
			#{msg},
		  </if>
		  <if test="ip != null" >
			#{ip},
		  </if>
		  <if test="dateAdd != null" >
			#{dateAdd},
      </if>
      <if test="dateAdd == null" >
      NOW(),
		  </if>
		  <if test="updatedAt != null" >
			#{updatedAt},
		  </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yinmimoney.web.p2pnew.pojo.SysLog" >
    UPDATE `sys_log`
    <set >
	  <if test="adminId != null" >
        `admin_id` = #{adminId},
      </if>
	  <if test="moduleType != null" >
        `module_type` = #{moduleType},
      </if>
	  <if test="oprateType != null" >
        `oprate_type` = #{oprateType},
      </if>
	  <if test="name != null" >
        `name` = #{name},
      </if>
	  <if test="uri != null" >
        `uri` = #{uri},
      </if>
	  <if test="msg != null" >
        `msg` = #{msg},
      </if>
	  <if test="ip != null" >
        `ip` = #{ip},
      </if>
	  <if test="dateAdd != null" >
        `date_add` = #{dateAdd},
      </if>
	  <if test="updatedAt != null" >
        `updated_at` = #{updatedAt},
      </if>
    </set>
    WHERE `id` = #{id}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yinmimoney.web.p2pnew.pojo.SysLog" >
	UPDATE `sys_log` SET
        `admin_id` = #{adminId},
        `module_type` = #{moduleType},
        `oprate_type` = #{oprateType},
        `name` = #{name},
        `uri` = #{uri},
        `msg` = #{msg},
        `ip` = #{ip},
        `date_add` = #{dateAdd},
        `updated_at` = #{updatedAt}
    WHERE `id` = #{id}
  </update>
  <update id="updateByCondition" parameterType="java.util.Map" >
    UPDATE `sys_log`
    <set>
	  <if test="entity.adminId != null" >
        `admin_id` = #{entity.adminId},
      </if>
	  <if test="entity.moduleType != null" >
        `module_type` = #{entity.moduleType},
      </if>
	  <if test="entity.oprateType != null" >
        `oprate_type` = #{entity.oprateType},
      </if>
	  <if test="entity.name != null" >
        `name` = #{entity.name},
      </if>
	  <if test="entity.uri != null" >
        `uri` = #{entity.uri},
      </if>
	  <if test="entity.msg != null" >
        `msg` = #{entity.msg},
      </if>
	  <if test="entity.ip != null" >
        `ip` = #{entity.ip},
      </if>
	  <if test="entity.dateAdd != null" >
        `date_add` = #{entity.dateAdd},
      </if>
	  <if test="entity.updatedAt != null" >
        `updated_at` = #{entity.updatedAt},
      </if>
      <foreach collection="entity.nullColums" item="nullColum">
        `${nullColum}` = NULL,
      </foreach>
    </set>
    <include refid="map_params_where_condition" />
  </update>
  <update id="updateIncreateNumbers" parameterType="java.util.Map" >
    UPDATE `sys_log`
    <set>
      <foreach collection="increateNumbers" item="numberCloums">
        `${numberCloums.column}` = `${numberCloums.column}` + #{numberCloums.number},
      </foreach>
    </set>
    <include refid="map_params_where_condition" />
  </update>
  <sql id="map_params_where_condition" >
    <trim prefix="WHERE" prefixOverrides="AND">
	  <if test="id != null" >
        AND `id` = #{id}
	  </if>
	  <if test="adminId != null" >
        AND `admin_id` = #{adminId}
	  </if>
	  <if test="moduleType != null" >
        AND `module_type` = #{moduleType}
	  </if>
	  <if test="oprateType != null" >
        AND `oprate_type` = #{oprateType}
	  </if>
	  <if test="name != null" >
        AND `name` = #{name}
	  </if>
	  <if test="uri != null" >
        AND `uri` = #{uri}
	  </if>
	  <if test="msg != null" >
        AND `msg` = #{msg}
	  </if>
	  <if test="ip != null" >
        AND `ip` = #{ip}
	  </if>
	  <if test="dateAdd != null" >
        AND `date_add` = #{dateAdd}
	  </if>
	  <if test="updatedAt != null" >
        AND `updated_at` = #{updatedAt}
	  </if>
	  <if test="condition != null">
	  <if test="condition.id != null" >
        AND `id` = #{condition.id}
	  </if>
	  <if test="condition.adminId != null" >
        AND `admin_id` = #{condition.adminId}
	  </if>
	  <if test="condition.moduleType != null" >
        AND `module_type` = #{condition.moduleType}
	  </if>
	  <if test="condition.oprateType != null" >
        AND `oprate_type` = #{condition.oprateType}
	  </if>
	  <if test="condition.name != null" >
        AND `name` = #{condition.name}
	  </if>
	  <if test="condition.uri != null" >
        AND `uri` = #{condition.uri}
	  </if>
	  <if test="condition.msg != null" >
        AND `msg` = #{condition.msg}
	  </if>
	  <if test="condition.ip != null" >
        AND `ip` = #{condition.ip}
	  </if>
	  <if test="condition.dateAdd != null" >
        AND `date_add` = #{condition.dateAdd}
	  </if>
	  <if test="condition.updatedAt != null" >
        AND `updated_at` = #{condition.updatedAt}
	  </if>
	  </if>
	  <if test="vo != null and !vo.expressionChainList.empty">
        AND
        <foreach collection="vo.expressionChainList" item="expressionChain" separator="OR">
          <if test="!expressionChain.expressionList.empty">
            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
              <choose>
                <when test="expression.type == 0">
                  `${expression.column}` ${expression.operator}
                </when>
                <when test="expression.type == 1">
                  `${expression.column}` ${expression.operator} #{expression.value}
                </when>
                <when test="expression.type == 2">
                  `${expression.column}` ${expression.operator} #{expression.value} AND #{expression.value1}
                </when>
                <when test="expression.type == 3">
                  `${expression.column}` ${expression.operator}
                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
                    #{value}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </if>
        </foreach>
      </if>
      <if test="expressionChainList != null and !expressionChainList.empty">
        AND
        <foreach collection="expressionChainList" item="expressionChain" separator="OR">
          <if test="!expressionChain.expressionList.empty">
            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
              <choose>
                <when test="expression.type == 0">
                  `${expression.column}` ${expression.operator}
                </when>
                <when test="expression.type == 1">
                  `${expression.column}` ${expression.operator} #{expression.value}
                </when>
                <when test="expression.type == 2">
                  `${expression.column}` ${expression.operator} #{expression.value} AND #{expression.value1}
                </when>
                <when test="expression.type == 3">
                  `${expression.column}` ${expression.operator}
                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
                    #{value}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </if>
        </foreach>
      </if>
      <include refid="map_params_where_condition_ext" />
    </trim>
  </sql>
  <select id="getList" resultMap="BaseResultMap" parameterType="java.util.Map" >
    SELECT
    <include refid="Base_Column_List" />
    FROM `sys_log`
    <include refid="map_params_where_condition" />
    <if test="orderBy == null" >
      ORDER BY `id` DESC
    </if>
    <if test="orderBy != null and orderBy != 'no'" >
      ORDER BY ${orderBy}
    </if>
    <if test="pageBeginIndex != null and pageSize != null" >
      LIMIT #{pageBeginIndex},#{pageSize}
    </if>
    <if test="pageBeginIndex == null and pageSize != null" >
      LIMIT #{pageSize}
    </if>
    <if test="pageBeginIndex != null and pageSize == null" >
      LIMIT #{pageBeginIndex}
    </if>
  </select>
  <delete id="delete" parameterType="java.util.Map" >
    DELETE
    FROM `sys_log`
    <include refid="map_params_where_condition" />
  </delete>
  <select id="getCount" resultType="java.lang.Integer" parameterType="java.util.Map" >
    SELECT COUNT(1)
    FROM `sys_log`
    <include refid="map_params_where_condition" />
  </select>
</mapper>